<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>论使用python和WebAssembly重写scratch编译器</title>
    <link href="/2022/10/05/%E8%AE%BA%E4%BD%BF%E7%94%A8python%E5%92%8CWebAssembly%E9%87%8D%E5%86%99scratch%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <url>/2022/10/05/%E8%AE%BA%E4%BD%BF%E7%94%A8python%E5%92%8CWebAssembly%E9%87%8D%E5%86%99scratch%E7%BC%96%E8%AF%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>scratch最大的缺陷就是性能及其拉跨，自从有了Evoluted-Scratch,Turbowarp, leopard-js等jit编译器，这个问题得到了一部分的解决。但是并没有使scratch的性能与其他语言接近，所以我认为可以用WASM来写scratch编译器，或许能最大程度提升scratch的运行速度。</p><p>目前使用python来写编译器的核心部分，编译器会将project.json和assets编译成C++(使用SDL作为渲染引擎)，再使用Emscripten将C++编译成WASM。</p><p>在BlockAssembly中，所有的积木都是scratch3.0包含的标准积木，但是可以通过一个类似core.js的”标准编译器”, 将clipcc, ccw, acamp等平台的特殊积木编译成标准积木。也可以更方便的编写扩展库，只需要一个json文件就能将block和code对应起来，编写成一个模块。也可以使用scratch积木轻松编写模块。</p><p>使用SDL和WASM的好处是，一样的代码能在不同的平台运行，(Andriod, IOS, Mac, Windows, Web等等)，scratch程序就可以轻松的打包到不同的平台。SDL后端使用OpenGL渲染，能稳定的达到浏览器支持的最高帧数。</p><p>最后，Github项目地址: <a href="https://github.com/LuminousWL/BlockAssembly">BlockAssembly</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>scratch</tag>
      
      <tag>C++</tag>
      
      <tag>SDL</tag>
      
      <tag>WebAssembly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/04/hello-world/"/>
    <url>/2022/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
